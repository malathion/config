snippet table "table schema definition" b
/*
	table: ${1:tableName}
	${2:tableComment}
	created on: `date`
	copyright
*/
create table $1
(
		-- primary key column
	id			  serial
		-- foreign key columns
		-- maintenance columns
,   insertedTime	timestamptz	 default "now"()
,   insertedUser	text			default "current_user"()
,   updatedTime		timestamptz
,   updatedUser	 	text
		-- data columns
		-- data validation constraints
		-- foreign key constraints
		-- primary key constraint
,   constraint pkey_$1	  primary key (id)
);
	-- privileges
alter	table	 $1 owner to	${3:postgres};
grant	all	  on $1 to			$3;
revoke	all	  on $1 from		public;
	-- indexes
	-- triggers
	-- comments
comment on table	$1				is '$2';
comment on column	$1.id			is 'primary key';
endsnippet

snippet function "function definer" b
/*
	function: ${1:functionName}(${2:functionParameters})
	${3:functionComment}
	created on: `date`
	copyright
*/
create function $1($2) returns ${4:returnType} as

$body$
declare

begin
	return true;
end;

$body$
  language ${6:plpgsql} ${7:volatile}
  cost 100;
alter function $1($2) owner to ${8:postgres};
endsnippet

snippet aggregate "aggregate definer" b
/*
	aggregate: ${1:aggregateName}(${2:functionParameters})
	${3:aggregateComment}
	created on: `date`
	copyright
*/
create aggregate $1($2) (
	SFUNC = sfunc,
	STYPE = state_data_type
	[ , FINALFUNC = ffunc ]
	[ , INITCOND = initial_condition ]
	[ , SORTOP = sort_operator ]
)
alter aggregate $1($2) owner to ${8:postgres};
endsnippet

snippet view "view definer" b
/*
	${1:viewType }view: ${2:viewName}
	${3:viewComment}
	created on: `date`
	copyright
*/
create $1 view $2 as (
	select
	from
--  where
--  order by
--  having
);
	-- privileges
revoke all		on $2	from				public;
alter $1 view	   $2	owner to			${4:viewOwner};
grant all		on $2	to				  $4;
	-- indexes
	-- triggers
endsnippet

snippet nnul "add a not null constraint to a column" b
,   constraint	  nnul_${1:columnName}	check ($1 is not null)
endsnippet

snippet uniq "add a unique constraint to a column" b
,   constraint	  uniq_${1:columnName}	check ($1 is not null)
endsnippet

snippet chek "add a check constraint to a column" b
,   constraint	  chek_${1:columnName}	check ($2)
endsnippet

snippet idx "add an index to a column" b
create index	idx_${1:tableName}_${2:columnName} on		$1 ( $2 );
endsnippet

snippet coc "add a comment to a column" b
comment on column   $1.$2			is '$3';
endsnippet

snippet begin "transaction block"
begin
		-- do your business


		-- error handling
	exception
		when others then
			raise notice '% %', SQLERRM, SQLSTATE;
			raise exception '${1:functionName}(): FATAL - an unhandled exception caused the transaction to be rolled back.';
end;
endsnippet

