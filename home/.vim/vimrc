    " infect pathogen plugin loader
call pathogen#infect()

    " listchars to highlight stuff we don't like
set list
    " If we have utf-8 encoding, use fancy listchars
if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8')
    set listchars=tab:→\ ,eol:\ ,trail:°,extends:≻,precedes:≺,conceal:�,nbsp:—
else
    set listchars=tab:>\ ,eol:\ ,trail:•,extends:>,precedes:<,conceal:¤,nbsp: 
endif

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux'
        " If terminal does not support 256 colors, use Mustang2 instead of zenburn
    set t_Co=16
    colorscheme mustang2
else
        " otherwise, use zenburn
    set t_Co=256
    let g:zenburn_high_contrast=1
    colorscheme zenburn
endif

    " Disable background color erase
set t_ut=

    " Exclude these files and directories from search
set wildignore+=*.git/*,*.hg/*,*.svn/*,*.so,*.pdf,*.py[co],*.o,*.swp,*.aux,*.toc

    " if we have syntax, use it
if has('syntax') && !exists('g:syntax_on')
    syntax enable
        " use syntax engine to control folding
    set foldmethod=syntax
        " start with all folds open
    set foldlevelstart=99
endif

    " show what row and column I'm on
set cursorline
set nocursorcolumn

    " indent like the previous line
set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab

    " don't wrap unless i say so
set nowrap

    " always search the whole file regardless of cursor position
set wrapscan

    " highlight all search matches
set hlsearch

    " make left/right keys wrap to start of the line
set whichwrap+=h,l,<,>,[,]

"
" tabstops
"
    " expand tabs into whitespace
set expandtab
    " tabstop is 4 characters
set tabstop=4
    " delete key in insert mode deletes 4 spaces
set softtabstop=4
    " shift keys in normal mode add or remove 4 spaces
set shiftwidth=4
    " autocommands for specific file types
if has("autocmd")
  " Enable file type detection
  filetype on

  " Syntax of these languages is fussy over tabs Vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

  " Customisations based on house-style (arbitrary)
  "autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
  "autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  "autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab

  " Treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss setfiletype xml
endif

" auto-shift to tab stop
set shiftround

" time out bindings that don't respond quickly
set ttimeout
set ttimeoutlen=50

" search incrementally
set incsearch

" show search results visually
set showmatch

" When searching, scroll to the next search pattern automatically with 4+ lines visible above and below the cursor
set scrolloff=4

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

set laststatus=2
set ruler

" display line numbers relative to the cursor position
" set relativenumber
" display line numbers in absolute terms
set number
" show last command 
set showcmd
"
set wildmenu

if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline


if &shell =~# 'fish$'
  set shell=/usr/bin/bash
endif

set autoread
set fileformats="unix,dos"

" Enforce 1000 lines of history maximum
if &history < 1000
  set history=1000
endif
" Enforce 50 tabs maximum
if &tabpagemax < 50
  set tabpagemax=50
endif
" Put something in viminfo for some reason
if !empty(&viminfo)
  set viminfo^=!
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

inoremap <C-U> <C-G>u<C-U>

" stop using arrow keys ya dummy

noremap <left> :echoe "Stop using arrow keys."<cr>
noremap <right> :echoe "Stop using arrow keys."<cr>
noremap <up> :echoe "Stop using arrow keys."<cr>
noremap <down> :echoe "Stop using arrow keys."<cr>

" UltiSnips bindings
let g:UltiSnipsEditSplit            = "vertical"
let g:UltiSnipsListSnippets         = "<c-tab>"
let g:UltiSnipsExpandTrigger        = "<s-tab>"
let g:UltiSnipsJumpForwardTrigger   = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger  = "<c-k>"

    " remove whitespace
function! <SID>StripTrailingWhitespaces()
        " Preparation. save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
        " Do the business:
    %s/\s\+$//e
        " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
    " do it automatically whenever we save
autocmd BufWritePre *.py,*.js,*.sql,*.pgsql :call <SID>StripTrailingWhitespaces()

