" vim600: set foldmethod=marker foldlevel=0 nolist:
source ~/.vim/vimrc.d/00-plugins.vim

  " Use vim defaults in favor of backward-compatibility with vi
set nocompatible

  " Use modelines
set modeline

  " Interface
source ~/.vim/vimrc.d/01-interface-colorscheme.vim
source ~/.vim/vimrc.d/01-interface-listchars.vim
source ~/.vim/vimrc.d/01-interface-fonts.vim
source ~/.vim/vimrc.d/01-interface-cursor.vim
source ~/.vim/vimrc.d/01-interface-syntax.vim
source ~/.vim/vimrc.d/01-interface-indentation.vim
source ~/.vim/vimrc.d/01-interface-orientation.vim
source ~/.vim/vimrc.d/01-interface-statusline.vim
source ~/.vim/vimrc.d/01-interface-searching.vim
source ~/.vim/vimrc.d/01-interface-spelling.vim
source ~/.vim/vimrc.d/01-interface-other.vim

  " Bindings
source ~/.vim/vimrc.d/05-bindings.vim
" Plugins {{{1
  " Ale {{{2
let g:ale_linters = {
\	'c': ['gcc', 'norminette'],
\   'cpp': ['gcc', 'norminette'],
\   'h': ['gcc', 'norminette'],
\   'hpp': ['gcc', 'norminette'],
\	'python': ['flake8']
\}
" let g:ale_python_flake8_options = '--ignore=E501 --doctests'  " ignore line too long
let g:ale_python_flake8_options = '--doctests --ignore'  " Don't use the default ignore list (catch everything)
let g:ale_completion_enabled = 1
let g:airline#extensions#ale#enabled = 1

  " Syntax 2}}}
  " supertab {{{2
  " binds to start the autocompletion
let g:SuperTabMappingForward = '<c-space>'
let g:SuperTabMappingBackward = '<s-c-space>'
  " Attempt to guess what I am auto-completing by context
  " e.g. method calls or attribute references via '.', '::' or '->', and file paths with '/'
let g:SuperTabDefaultCompletionType="context"
let g:SuperTabContextDefaultCompletionType="<c-p>"
  " 2}}}
  " UltiSnips {{{2
let g:UltiSnipsEditSplit          = "vertical"
let g:UltiSnipsListSnippet        = "<c-tab>"
let g:UltiSnipsExpandTrigger      = "<s-tab>"
let g:UltiSnipsJumpForwardTrigger   = "<s-l>"
let g:UltiSnipsJumpBackwardTrigger  = "<s-h>"
  " 2}}}
  " smartusline {{{2
let g:smartusline_string_to_highlight = '(%n) %f '
let g:smartusline_hi_replace = 'guibg=#e454ba guifg=black ctermbg=magenta ctermfg=black'
let g:smartusline_hi_insert = 'guibg=orange guifg=black ctermbg=58 ctermfg=black'
let g:smartusline_hi_virtual_replace = 'guibg=#e454ba guifg=black ctermbg=magenta ctermfg=black'
let g:smartusline_hi_normal = 'guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black'
  " 2}}}
  " easy-align {{{2
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
vmap <s-Enter> <Plug>(LiveEasyAlign)
"
" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)
  " 2}}}
  " terminus {{{2
" Controls whether the cursor changes shape when changing modes
let g:TerminusCursorShape = 1
" Controls the shape of the cursor in insert mode: 0 block 1 bar 2 underline
let g:TerminusInsertCursorShape = 1
" Controls the shape of the cursor in normal mode
let g:TerminusNormalCursorShape = 0
" Controls the shape of the cursor in replace mode
let g:TerminusReplaceCursorShape = 2
" Controls whether terminus attempts to improve mouse function by setting
" 'mouse' and 'typemouse' settings.
let g:TerminusMouse = 0
" Controls whether terminus attempts to enable focus reporting
let g:TerminusFocusReporting = 1
  " 2}}}
" 1}}}
" Functions {{{1
  " * Whitespace: {{{2
  " remove whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation. save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
    " Do the business:
  %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
  " do it whenever we hit a key
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
" 2}}}
" * Hex Editing {{{2
" retrieved from http://vim.wikia.com/wiki/Improved_hex_editing on Sat Jan  4 13:03:41 PST 2014
"
" ex command for toggling hex mode - define mapping if desired
command -bar Hexmode call ToggleHex()

"" helper function to toggle hex mode
function ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
  setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction
" 2}}}
" 1}}}
" Files {{{1
  " Use strong encryption when invoked with :X
set cryptmethod=blowfish
  " EOL formats to try when parsing new files with unclear MIMEtypes
set fileformats="unix,dos"
  " filetype-specific settings {{{2
if has("autocmd")
    " Enable file type detection
  filetype on
	" bash vi-mode
  autocmd BufRead,BufNewFile /tmp/bash-fc-* set filetype=sh
    " Syntax of these languages is fussy over tabs vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    " shell
  autocmd FileType sh set expandtab shiftwidth=2 softtabstop=4
    " python
  autocmd FileType python let python_highlight_all = 1
  autocmd FileType python let python_slow_sync = 1
  autocmd FileType python set expandtab shiftwidth=4 softtabstop=4
  autocmd FileType python set completeopt=preview
  autocmd FileType c set foldmethod=marker shiftwidth=4 noexpandtab softtabstop=4
    " archlinux package build
  autocmd FileType PKGBUILD set expandtab shiftwidth=2 softtabstop=4
    " LaTeX
  autocmd Filetype tex,latex set grepprg=grep\ -nH\ $
  autocmd Filetype tex,latex let g:tex_flavor = "latex"
    " Customisations based on house-style (arbitrary)
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd FileType mail setlocal textwidth=79 spell
    " Treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss setfiletype xml
    " Treat document formats as zip files
    " TODO: this doesn't really work
  " au BufReadCmd *.docx,*.xlsx,*.pptx call zip#Browse(expand(""))
  " au BufReadCmd *.odt,*.ott,*.ods,*.ots,*.odp,*.otp,*.odg,*.otg call zip#Browse(expand(""))
endif
" }}}
" 1}}}
