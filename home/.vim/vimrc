" vim600: set foldmethod=marker foldlevel=0 nolist:
source ~/.vim/vimrc.d/00-plugins.vim
source ~/.vim/vimrc.d/00-plugins-settings.vim

  " Use vim defaults in favor of backward-compatibility with vi
set nocompatible

  " Use modelines
set modeline

  " Interface
source ~/.vim/vimrc.d/01-interface-colorscheme.vim
source ~/.vim/vimrc.d/01-interface-listchars.vim
source ~/.vim/vimrc.d/01-interface-fonts.vim
source ~/.vim/vimrc.d/01-interface-cursor.vim
source ~/.vim/vimrc.d/01-interface-syntax.vim
source ~/.vim/vimrc.d/01-interface-indentation.vim
source ~/.vim/vimrc.d/01-interface-orientation.vim
source ~/.vim/vimrc.d/01-interface-statusline.vim
source ~/.vim/vimrc.d/01-interface-searching.vim
source ~/.vim/vimrc.d/01-interface-spelling.vim
source ~/.vim/vimrc.d/01-interface-other.vim

  " Bindings
source ~/.vim/vimrc.d/05-bindings.vim

" Functions {{{1
  " * Whitespace: {{{2
  " remove whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation. save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
    " Do the business:
  %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
  " do it whenever we hit a key
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
" 2}}}
" * Hex Editing {{{2
" retrieved from http://vim.wikia.com/wiki/Improved_hex_editing on Sat Jan  4 13:03:41 PST 2014
"
" ex command for toggling hex mode - define mapping if desired
command -bar Hexmode call ToggleHex()

"" helper function to toggle hex mode
function ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
  setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction
" 2}}}
" 1}}}
" Files {{{1
  " Use strong encryption when invoked with :X
set cryptmethod=blowfish
  " EOL formats to try when parsing new files with unclear MIMEtypes
set fileformats="unix,dos"
  " filetype-specific settings {{{2
if has("autocmd")
    " Enable file type detection
  filetype on
	" bash vi-mode
  autocmd BufRead,BufNewFile /tmp/bash-fc-* set filetype=sh
    " Syntax of these languages is fussy over tabs vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    " shell
  autocmd FileType sh set expandtab shiftwidth=2 softtabstop=4
    " python
  autocmd FileType python let python_highlight_all = 1
  autocmd FileType python let python_slow_sync = 1
  autocmd FileType python set expandtab shiftwidth=4 softtabstop=4
  autocmd FileType python set completeopt=preview
  autocmd FileType c set foldmethod=marker shiftwidth=4 noexpandtab softtabstop=4
    " archlinux package build
  autocmd FileType PKGBUILD set expandtab shiftwidth=2 softtabstop=4
    " LaTeX
  autocmd Filetype tex,latex set grepprg=grep\ -nH\ $
  autocmd Filetype tex,latex let g:tex_flavor = "latex"
    " Customisations based on house-style (arbitrary)
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd FileType mail setlocal textwidth=79 spell
    " Treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss setfiletype xml
    " Treat document formats as zip files
    " TODO: this doesn't really work
  " au BufReadCmd *.docx,*.xlsx,*.pptx call zip#Browse(expand(""))
  " au BufReadCmd *.odt,*.ott,*.ods,*.ots,*.odp,*.otp,*.odg,*.otg call zip#Browse(expand(""))
endif
" }}}
" 1}}}
