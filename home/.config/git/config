# git config
# 
# © Copyright 2014 Ryan Delaney.
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
# 
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

[user] # {{{1
	name = Ryan Delaney
	email = ryan.delaney@gmail.com
# 1}}}
[core] # {{{1
	excludesfile = /home/ryan/.config/git/gitignore_global
	whitespace=trailing-space,space-before-tab
	# core.filemode
	#	If false, the executable bit differences between the index and the working tree
	#	are ignored; useful on broken filesystems like FAT. See git-update-index(1).
	#	
	#	The default is true, except git-clone(1) or git-init(1) will probe and set
	#	core.fileMode false if appropriate when the repository is created.
	filemode = true
	# core.symlinks
	#	If false, symbolic links are checked out as small plain files that contain the link text.  git-update-index(1) and git-add(1)
	#	will not change the recorded type to regular file. Useful on filesystems like FAT that do not support symbolic links.
	#
	#	The default is true, except git-clone(1) or git-init(1) will probe and set core.symlinks false if appropriate when the
	#	repository is created.
	symlinks = true
		# automatically perform dos2unix conversion when committing
		# text
#	autocrlf = input
# 1}}}
[push] # {{{1
		# Only push the active branch unless told otherwise
	default = tracking
# 1}}}
[branch] # {{{1
		# auto-reupbase is dumb, because rebase is evil
	autosetuprebase = never
# 1}}}
[diff] # {{{1
	tool = vimdiff
	renames = copies
	mnemonicprefix = true
[difftool]
	prompt = true
# 1}}}
[merge] # {{{1
	tool = vimdiff
	conflictstyle = diff3
[mergetool]
	prompt = true
# 1}}}
[pager] # {{{1
	diff = less
# 1}}}
[alias] # {{{1
		# logs
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --no-merges
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
	lgd = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
		# diff
	d = difftool -t vimdiff
		# fetch
	# Should we use --recurse-submodules-yes by default?
	f = fetch
	fa = fetch --all
	fd = fetch --dry-run
	fp = fetch --prune
	fap = fetch --all --prune
		# merge
	m = merge
	mt = mergetool -t vimdiff
	cp = cherry-pick
	dc = diff --cached
	ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
		# remotes
	cl = clone
	remotes = remote -v
		# status
	s  = status -s
	st = status
	sp = status --porcelain
		# commits
	c  = commit
	cs = commit -S
	tags = tag --list -n3
		# branches
	branches = branch -v
	co = checkout
	br = branch
	r = reset
		# searching
	find = "!git ls-files | grep -i"  
	g = "grep --color=auto --perl-regexp --full-name --heading --break --line-number -I"
# 1}}}
[color] # {{{1
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	ui = auto
[color "branch"]
	current = green bold
	local = green
	remote = red bold
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold
[color "sh"]
	branch = yellow
# 1}}}
[advice] # {{{1
	# Set this variable to false if you want to disable
	# pushNonFFCurrent, pushNonFFDefault, pushNonFFMatching,
	# pushAlreadyExists, pushFetchFirst, and pushNeedsForce
	# simultaneously.
	# pushUpdateRejected = false

	# Advice shown when git-push(1) fails due to a non-fast-forward
	# update to the current branch.
	pushNonFFCurrent = true

    # Advice to set push.default to upstream or current when you
    # ran git-push(1) and pushed matching refs by default (i.e. you
    # did not provide an explicit refspec, and no push.default
    # configuration was set) and it resulted in a non-fast-forward
    # error.
	pushNonFFDefault = true

    # Advice shown when you ran git-push(1) and pushed matching
    # refs explicitly (i.e. you used :, or specified a refspec that
    # isn’t your current branch) and it resulted in a
    # non-fast-forward error.
	pushNonFFMatching = true

    # Shown when git-push(1) rejects an update that does not
    # qualify for fast-forwarding (e.g., a tag.)
	pushAlreadyExists = true

    # Shown when git-push(1) rejects an update that tries to
    # overwrite a remote ref that points at an object we do not
    # have.
	pushFetchFirst = true

    # Shown when git-push(1) rejects an update that tries to
    # overwrite a remote ref that points at an object that is not a
    # commit-ish, or make the remote ref point at an object that is
    # not a commit-ish.
	pushNeedsForce = true

    # Show directions on how to proceed from the current state in
    # the output of git-status(1), in the template shown when
    # writing commit messages in git-commit(1), and in the help
    # message shown by git-checkout(1) when switching branch.
    statusHints = false

    # Advise to consider using the -u option to git-status(1) when
    # the command takes more than 2 seconds to enumerate untracked
    # files.
    statusUoption = true

    # Advice shown when git-merge(1) refuses to merge to avoid
    # overwriting local changes.
    commitBeforeMerge = false

    # Advice shown by various commands when conflicts prevent the
    # operation from being performed.
    resolveConflict = true

    # Advice on how to set your identity configuration when your
    # information is guessed from the system username and domain
    # name.
    implicitIdentity = true

    # Advice shown when you used git-checkout(1) to move to the
    # detach HEAD state, to instruct how to create a local branch
    # after the fact.
    detachedHead = false

    # Advice that shows the location of the patch file when git-
    # am(1) fails to apply it.
    amWorkDir = true

    # In case of failure in the output of git-rm(1), show
    # directions on how to proceed from the current state.
    rmHints = true
# 1}}}
[gui] # {{{1
	wmstate = normal
	geometry = 1920x1014+1680+18 192 177
# 1}}}
# Remotes {{{
#
	# If there are a large number of similarly-named remote repositories and you want
	# to use a different format for them (such that the URLs you use will be
	# rewritten into URLs that work), you can create a configuration section of the
	# form:
[url "git@github.com:"]
	insteadOf = github:
	insteadOf = http://github.com/
	insteadOf = https://github.com
	# A URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will be
	# rewritten in any context that takes a URL to be "git://git.host.xz/repo.git".

	# You can choose to provide the name of a remote which you had previously
	# configured using git-remote(1), git-config(1) or even by a manual edit to the
	# $GIT_DIR/config file. The URL of this remote will be used to access the
	# repository. The refspec of this remote will be used by default when you do not
	# provide a refspec on the command line. The entry in the config file would
	# appear like this:
# [remote "<name>"]
#         url = <url>
#         pushurl = <pushurl>
#         push = <refspec>
#         fetch = <refspec>/
# }}}
# Submodules {{{
#
[submodule "home/.vim/bundle/fsharp"]
	url = git://github.com/kongo2002/fsharp-vim.git
[submodule "home/.vim/bundle/sourcecfg"]
	url = git@github.com:rpdelaney/vim-sourcecfg.git
[submodule "home/.vim/bundle/vim-excel"]
	url = git@github.com:yakiang/excel.vim.git
[submodule "home/.vim/bundle/vim-daylight"]
	url = git@github.com:rpdelaney/vim-daylight.git
[submodule "home/.vim/bundle/pgsql"]
	url = git@github.com:rpdelaney/vim-pgsql.git
[submodule "home/.vim/bundle/sprunge"]
	url = git@github.com:chilicuil/vim-sprunge.git
[submodule "home/bin/fdupes"]
	url = git@github.com:tobiasschulz/fdupes.git
[submodule "home/.vim/bundle/fugitive"]
	url = git@github.com:tpope/vim-fugitive.git
[submodule "home/.vim/bundle/vim-shell-executor"]
	url = git@github.com:rpdelaney/vim-shell-executor.git
[submodule "home/.vim/bundle/solarized"]
	url = git@github.com:altercation/solarized.git
[submodule "home/.vim/bundle/rtorrent"]
	url = git@github.com:rpdelaney/rtorrent-syntax-file.git
[submodule "home/.vim/bundle/json"]
	url = git@github.com:jkufner/vim-json.git
[submodule "home/.vim/bundle/sourcepawn"]
	url = git@github.com:/withgod/vim-sourcepawn.git
[submodule "home/.vim/bundle/psqlrc"]
	url = git@github.com:rpdelaney/vim-psqlrc.git
[submodule "home/.vim/bundle/airline"]
	url = git@github.com:bling/vim-airline.git
[submodule "home/.vim/bundle/gitgutter"]
	url = git@github.com:airblade/vim-gitgutter.git
[submodule "home/.vim/bundle/syntastic"]
	url = https://github.com/scrooloose/syntastic.git
[submodule "home/.vim/bundle/gnupg"]
	url = https://github.com/jamessan/vim-gnupg.git
[submodule "aurvote"]
	url = https://github.com/rpdelaney/aurvote
[submodule "shellcheck"]
	url = https://github.com/koalaman/shellcheck.git
[submodule "home/.vim/bundle/minibufexpl"]
	url = https://github.com/fholgado/minibufexpl.vim.git
[submodule "home/.vim/bundle/surround"]
	url = https://github.com/tpope/vim-surround.git
[submodule "home/.vim/bundle/pathogen"]
	url = https://github.com/tpope/vim-pathogen.git
[submodule "home/.vim/bundle/repeat"]
	url = https://github.com/tpope/vim-repeat.git
[submodule "home/.vim/bundle/characterize"]
	url = https://github.com/tpope/vim-characterize
[submodule "home/.vim/bundle/obsession"]
	url = https://github.com/tpope/vim-obsession.git
[submodule "home/.vim/bundle/abolish"]
	url = https://github.com/tpope/vim-abolish.git
[submodule "home/.vim/bundle/jedi"]
	url = https://github.com/davidhalter/jedi-vim.git
[submodule "home/.vim/bundle/ultisnips"]
	url = https://github.com/SirVer/ultisnips.git
[submodule "LS_COLORS"]
	url = https://github.com/rpdelaney/LS_COLORS
[submodule "home/.vim/bundle/recover"]
	url = git@github.com:chrisbra/Recover.vim.git
[submodule "home/.vim/bundle/tabular"]
	url = git://github.com/godlygeek/tabular.git
[submodule "home/.vim/bundle/easy-align"]
	url = git@github.com:junegunn/vim-easy-align.git
