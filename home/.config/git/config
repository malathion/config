# git config
# vim: ft=gitconfig noet foldmethod=marker

[user] # {{{1
	name = Ryan Delaney
	email = ryan.delaney@gmail.com
# 1}}}
[core] # {{{1
	excludesfile = /home/ryan/.config/git/ignore
	whitespace = trailing-space,space-before-tab
	# core.filemode
	#	If false, the executable bit differences between the index and the working tree
	#	are ignored; useful on broken filesystems like FAT. See git-update-index(1).
	#
	#	The default is true, except git-clone(1) or git-init(1) will probe and set
	#	core.fileMode false if appropriate when the repository is created.
	filemode = true
	# core.symlinks
	#	If false, symbolic links are checked out as small plain files that contain the link text.  git-update-index(1) and git-add(1)
	#	will not change the recorded type to regular file. Useful on filesystems like FAT that do not support symbolic links.
	#
	#	The default is true, except git-clone(1) or git-init(1) will probe and set core.symlinks false if appropriate when the
	#	repository is created.
	symlinks = true
		# automatically perform dos2unix conversion when committing
		# text
#	autocrlf = input
# 1}}}
[push] # {{{1
		# Only push the active branch unless told otherwise
	default = tracking
# 1}}}
[branch] # {{{1
		# auto-reupbase is bad, because rebase is evil
	autosetuprebase = never
# 1}}}
[diff] # {{{1
	tool = vimdiff
	renames = copies
	mnemonicprefix = true
[difftool]
	prompt = true
# 1}}}
[merge] # {{{1
	tool = vimdiff
	conflictstyle = diff3
[mergetool]
	prompt = true
# 1}}}
[pager] # {{{1
	diff = less
# 1}}}
[alias] # {{{1
		# logs
	ls = log --pretty=format:%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn] --decorate --no-merges
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
	lgd = log --pretty=format:%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn] --decorate --date=short
		# diff
	d = difftool -t vimdiff
	dc = difftool -t vimdiff --cached
		# fetch
	# Should we use --recurse-submodules-yes by default?
	f = fetch
	fa = fetch --all --recurse-submodules=on-demand
	fd = fetch --dry-run
	fp = fetch --prune
	fap = fetch --all --prune --recurse-submodules=on-demand
		# merge
	m = merge
	mt = mergetool -t vimdiff
	cp = cherry-pick
	ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
		# remotes
	cl = clone
	remotes = remote -v
		# status
	s = status --short --untracked-files=no
	st = status
	sp = status --porcelain
		# commits
	c = commit --verbose
	cs = commit --verbose -S
	tags = tag --list -n3
		# branches
	co = checkout
	br = branch -v
	bra = branch -va
	r = reset
		# searching
	find = !git ls-files | grep -i
	g = !grep --color=auto --perl-regexp --full-name --heading --break --line-number -I
		# leaderboard
	leaders = shortlog -sn --all --no-merges
	issu = "! command -v hub >/dev/null 2>&1 && _issu() { hub issue --format=\"<#reset#><#green#> %i<#reset#> %t %l <#blue#><%au><#reset#> <#white#><#dim#>%U %n<#reset#>\" | colorizer || return $? ; } && _issu"
	issues = issue --format=\"%sC %i%Creset %t %l%n %Cblue%U%Creset%n%n %b %n%n\"
	exec = !$@
# 1}}}
[color] # {{{1
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	ui = auto
[color "branch"]
	current = green bold
	local = green
	remote = red bold
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold
[color "sh"]
	branch = yellow
# 1}}}
[advice] # {{{1
	# Set this variable to false if you want to disable
	# pushNonFFCurrent, pushNonFFDefault, pushNonFFMatching,
	# pushAlreadyExists, pushFetchFirst, and pushNeedsForce
	# simultaneously.
	# pushUpdateRejected = false

	# Advice shown when git-push(1) fails due to a non-fast-forward
	# update to the current branch.
	pushNonFFCurrent = true

	# Advice shown when you ran git-push(1) and pushed matching
	# refs explicitly (i.e. you used :, or specified a refspec that
	# isnâ€™t your current branch) and it resulted in a
	# non-fast-forward error.
	pushNonFFMatching = true

	# Shown when git-push(1) rejects an update that does not
	# qualify for fast-forwarding (e.g., a tag.)
	pushAlreadyExists = true

	# Shown when git-push(1) rejects an update that tries to
	# overwrite a remote ref that points at an object we do not
	# have.
	pushFetchFirst = true

	# Shown when git-push(1) rejects an update that tries to
	# overwrite a remote ref that points at an object that is not a
	# commit-ish, or make the remote ref point at an object that is
	# not a commit-ish.
	pushNeedsForce = true

	# Show directions on how to proceed from the current state in
	# the output of git-status(1), in the template shown when
	# writing commit messages in git-commit(1), and in the help
	# message shown by git-checkout(1) when switching branch.
	statusHints = false

	# Advise to consider using the -u option to git-status(1) when
	# the command takes more than 2 seconds to enumerate untracked
	# files.
	statusUoption = true

	# Advice shown when git-merge(1) refuses to merge to avoid
	# overwriting local changes.
	commitBeforeMerge = false

	# Advice shown by various commands when conflicts prevent the
	# operation from being performed.
	resolveConflict = true

	# Advice on how to set your identity configuration when your
	# information is guessed from the system username and domain
	# name.
	implicitIdentity = true

	# Advice shown when you used git-checkout(1) to move to the
	# detach HEAD state, to instruct how to create a local branch
	# after the fact.
	detachedHead = false

	# Advice that shows the location of the patch file when git-
	# am(1) fails to apply it.
	amWorkDir = true

	# In case of failure in the output of git-rm(1), show
	# directions on how to proceed from the current state.
	rmHints = true
# 1}}}
[gui] # {{{1
	wmstate = normal
	geometry = 1920x1014+1680+18 192 177
# 1}}}
# Remotes {{{
#
	# If there are a large number of similarly-named remote repositories and you want
	# to use a different format for them (such that the URLs you use will be
	# rewritten into URLs that work), you can create a configuration section of the
	# form:
[url "git@github.com:"]
	insteadof = github:
#	insteadOf = https://github.com
	# A URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will be
	# rewritten in any context that takes a URL to be "git://git.host.xz/repo.git".

	# You can choose to provide the name of a remote which you had previously
	# configured using git-remote(1), git-config(1) or even by a manual edit to the
	# $GIT_DIR/config file. The URL of this remote will be used to access the
	# repository. The refspec of this remote will be used by default when you do not
	# provide a refspec on the command line. The entry in the config file would
	# appear like this:
# [remote "<name>"]
#         url = <url>
#         pushurl = <pushurl>
#         push = <refspec>
#         fetch = <refspec>/
# }}}
[diff "gpg"]
	textconv = gpg --no-tty --decrypt
