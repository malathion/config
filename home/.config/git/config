# git config

[user]
	name = Ryan Delaney
	email = ryan.delaney@gmail.com
[core]
	excludesfile = /home/ryan/.config/git/gitignore_global
	whitespace=tab-in-indent,blank-at-eol
	filemode = true
#	symlinks = true
		# automatically perform dos2unix conversion when committing
		# text
#	autocrlf = input
[push]
		# Only push the active branch unless told otherwise
	default = tracking
[branch]
		# auto-reupbase is dumb, and rebase is evil
	autosetuprebase = never
[diff]
	external = gitdiff
	renames = copies
	mnemonicprefix = true
[alias]
		# logs
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --no-merges
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
	lgd = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
		# merging
	cp = cherry-pick
	dc = diff --cached
	ours = "!f() { git co --ours $@ && git add $@; }; f"
	theirs = "!f() { git co --theirs $@ && git add $@; }; f"
		# remotes
	cl = clone
	remotes = remote -v
		# status
	s  = status
	st = status -s
		# commits
	c  = commit
	cs = commit -S
	tags = tag --list -n3
		# branches
	branches = branch -v
	co = checkout
	br = branch
	r = reset
		# searching
	find = "!git ls-files | grep -i"
	grep = "grep -Ii"
[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	ui = auto
[color "branch"]
	current = green bold
	local = green
	remote = red bold
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[pager]
		# Don't use any diff pager, because pagers wreck vimdiff
	diff =
[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold
[color "sh"]
	branch = yellow
[advice]
	# Set this variable to false if you want to disable
	# pushNonFFCurrent, pushNonFFDefault, pushNonFFMatching,
	# pushAlreadyExists, pushFetchFirst, and pushNeedsForce
	# simultaneously.
	# pushUpdateRejected = false

	# Advice shown when git-push(1) fails due to a non-fast-forward
	# update to the current branch.
	pushNonFFCurrent = true

    # Advice to set push.default to upstream or current when you
    # ran git-push(1) and pushed matching refs by default (i.e. you
    # did not provide an explicit refspec, and no push.default
    # configuration was set) and it resulted in a non-fast-forward
    # error.
	pushNonFFDefault = true

    # Advice shown when you ran git-push(1) and pushed matching
    # refs explicitly (i.e. you used :, or specified a refspec that
    # isnâ€™t your current branch) and it resulted in a
    # non-fast-forward error.
	pushNonFFMatching = true

    # Shown when git-push(1) rejects an update that does not
    # qualify for fast-forwarding (e.g., a tag.)
	pushAlreadyExists = true

    # Shown when git-push(1) rejects an update that tries to
    # overwrite a remote ref that points at an object we do not
    # have.
	pushFetchFirst = true

    # Shown when git-push(1) rejects an update that tries to
    # overwrite a remote ref that points at an object that is not a
    # commit-ish, or make the remote ref point at an object that is
    # not a commit-ish.
	pushNeedsForce = true

    # Show directions on how to proceed from the current state in
    # the output of git-status(1), in the template shown when
    # writing commit messages in git-commit(1), and in the help
    # message shown by git-checkout(1) when switching branch.
    statusHints = true

    # Advise to consider using the -u option to git-status(1) when
    # the command takes more than 2 seconds to enumerate untracked
    # files.
    statusUoption = true

    # Advice shown when git-merge(1) refuses to merge to avoid
    # overwriting local changes.
    commitBeforeMerge = true

    # Advice shown by various commands when conflicts prevent the
    # operation from being performed.
    resolveConflict = true

    # Advice on how to set your identity configuration when your
    # information is guessed from the system username and domain
    # name.
    implicitIdentity = true

    # Advice shown when you used git-checkout(1) to move to the
    # detach HEAD state, to instruct how to create a local branch
    # after the fact.
    detachedHead = true

    # Advice that shows the location of the patch file when git-
    # am(1) fails to apply it.
    amWorkDir = true

    # In case of failure in the output of git-rm(1), show
    # directions on how to proceed from the current state.
    rmHints = true
[submodule "home/.vim/bundle/fsharp"]
	url = git://github.com/kongo2002/fsharp-vim.git
[submodule "home/.vim/bundle/vim-sourcecfg"]
	url = git@github.com:rpdelaney/vim-sourcecfg.git
[submodule "home/.vim/bundle/vim-excel"]
	url = git@github.com:yakiang/excel.vim.git
[submodule "home/.vim/bundle/vim-daylight"]
	url = git@github.com:rpdelaney/vim-daylight.git
[submodule "home/.vim/bundle/pgsql"]
	url = git@github.com:rpdelaney/vim-pgsql.git
[submodule "home/.vim/bundle/sprunge"]
	url = git@github.com:chilicuil/vim-sprunge.git
